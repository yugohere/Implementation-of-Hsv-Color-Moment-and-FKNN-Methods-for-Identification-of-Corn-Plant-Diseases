# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'calon_desain.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import matplotlib.pyplot as plt
import matplotlib.colors as colors
import mysql.connector
import os
import numpy as np
import pandas as pd
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QPixmap
from PyQt5.QtWidgets import QMessageBox

# koneksi database
db = mysql.connector.connect(
    host="localhost",
    user="root",
    password="",
    database="db_jagung"
)
cursor = db.cursor()

class Ui_MainWindow(object):
        def setupUi(self, MainWindow):
                MainWindow.setObjectName("MainWindow")
                MainWindow.resize(998, 641)
                MainWindow.setStyleSheet("background-color: rgb(171, 196, 223);")
                self.centralwidget = QtWidgets.QWidget(MainWindow)
                self.centralwidget.setObjectName("centralwidget")
                self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
                self.gridLayout.setContentsMargins(0, 0, 0, 0)
                self.gridLayout.setSpacing(0)
                self.gridLayout.setObjectName("gridLayout")
                self.konten = QtWidgets.QFrame(self.centralwidget)
                self.konten.setFrameShape(QtWidgets.QFrame.StyledPanel)
                self.konten.setFrameShadow(QtWidgets.QFrame.Raised)
                self.konten.setObjectName("konten")
                self.frame_input = QtWidgets.QFrame(self.konten)
                self.frame_input.setGeometry(QtCore.QRect(10, 10, 801, 571))
                self.frame_input.setFrameShape(QtWidgets.QFrame.StyledPanel)
                self.frame_input.setFrameShadow(QtWidgets.QFrame.Raised)
                self.frame_input.setObjectName("frame_input")
                self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.frame_input)
                self.verticalLayout_2.setObjectName("verticalLayout_2")
                self.frame_2 = QtWidgets.QFrame(self.frame_input)
                self.frame_2.setStyleSheet("background-color: rgb(39, 44, 54);")
                self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
                self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
                self.frame_2.setObjectName("frame_2")
                self.tombolInput = QtWidgets.QPushButton(self.frame_2)
                self.tombolInput.setGeometry(QtCore.QRect(610, 200, 150, 30))
                self.tombolInput.setMinimumSize(QtCore.QSize(150, 30))
                font = QtGui.QFont()
                font.setFamily("Segoe UI")
                font.setPointSize(9)
                self.tombolInput.setFont(font)
                self.tombolInput.setStyleSheet("QPushButton {\n"
        "    border: 2px solid rgb(52, 59, 72);\n"
        "    border-radius: 5px;    \n"
        "    background-color: rgb(52, 59, 72);\n"
        "    color: rgb(255, 255, 255);\n"
        "}\n"
        "QPushButton:hover {\n"
        "    background-color: rgb(57, 65, 80);\n"
        "    border: 2px solid rgb(61, 70, 86);\n"
        "}\n"
        "QPushButton:pressed {    \n"
        "    background-color: rgb(35, 40, 49);\n"
        "    border: 2px solid rgb(43, 50, 61);\n"
        "}")
                icon = QtGui.QIcon()
                icon.addPixmap(QtGui.QPixmap(":/16x16/icons/16                                                                                                                                                     x16/cil-folder-open.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                self.tombolInput.setIcon(icon)
                self.tombolInput.setObjectName("tombolInput")
                self.label_4 = QtWidgets.QLabel(self.frame_2)
                self.label_4.setGeometry(QtCore.QRect(20, 10, 361, 31))
                font = QtGui.QFont()
                font.setFamily("MS Sans Serif")
                font.setPointSize(11)
                self.label_4.setFont(font)
                self.label_4.setStyleSheet("color: rgb(255, 255, 255);")
                self.label_4.setObjectName("label_4")
                self.citraInput = QtWidgets.QLabel(self.frame_2)
                self.citraInput.setGeometry(QtCore.QRect(70, 50, 100, 99))
                self.citraInput.setMaximumSize(QtCore.QSize(100, 100))
                self.citraInput.setStyleSheet("border:2px solid;")
                self.citraInput.setText("")                                      
                self.citraInput.setObjectName("citraInput")
                self.tampilgambar = QtWidgets.QComboBox(self.frame_2)
                self.tampilgambar.setGeometry(QtCore.QRect(70, 160, 151, 31))
                self.tampilgambar.setStyleSheet("border: 2px solid rgb(52, 59, 72);\n"
        "border-radius: 5px;    \n"
        "background-color: rgb(52, 59, 72);\n"
        "color: rgb(255, 255, 255);")
                self.tampilgambar.setObjectName("tampilgambar")
                self.tampilgambar.addItem("")
                self.inputGambar = QtWidgets.QPushButton(self.frame_2)
                self.inputGambar.setGeometry(QtCore.QRect(70, 200, 150, 30))
                self.inputGambar.setMinimumSize(QtCore.QSize(150, 30))
                font = QtGui.QFont()
                font.setFamily("Segoe UI")
                font.setPointSize(9)
                self.inputGambar.setFont(font)
                self.inputGambar.setStyleSheet("QPushButton {\n"
        "    border: 2px solid rgb(52, 59, 72);\n"
        "    border-radius: 5px;    \n"
        "    background-color: rgb(52, 59, 72);\n"
        "    color: rgb(255, 255, 255);\n"
        "}\n"
        "QPushButton:hover {\n"
        "    background-color: rgb(57, 65, 80);\n"
        "    border: 2px solid rgb(61, 70, 86);\n"
        "}\n"
        "QPushButton:pressed {    \n"
        "    background-color: rgb(35, 40, 49);\n"
        "    border: 2px solid rgb(43, 50, 61);\n"
        "}")
                self.inputGambar.setIcon(icon)
                self.inputGambar.setObjectName("inputGambar")
                self.trainData = QtWidgets.QPushButton(self.frame_2)
                self.trainData.setGeometry(QtCore.QRect(250, 200, 150, 30))
                self.trainData.setMinimumSize(QtCore.QSize(150, 30))
                font = QtGui.QFont()
                font.setFamily("Segoe UI")
                font.setPointSize(9)
                self.trainData.setFont(font)
                self.trainData.setStyleSheet("QPushButton {\n"
        "    border: 2px solid rgb(52, 59, 72);\n"
        "    border-radius: 5px;    \n"
        "    background-color: rgb(52, 59, 72);\n"
        "    color: rgb(255, 255, 255);\n"
        "}\n"
        "QPushButton:hover {\n"
        "    background-color: rgb(57, 65, 80);\n"
        "    border: 2px solid rgb(61, 70, 86);\n"
        "}\n"
        "QPushButton:pressed {    \n"
        "    background-color: rgb(35, 40, 49);\n"
        "    border: 2px solid rgb(43, 50, 61);\n"
        "}")
                self.trainData.setIcon(icon)
                self.trainData.setObjectName("Training Data")
                self.tombolInput.raise_()
                self.label_4.raise_()
                self.citraInput.raise_()
                self.tampilgambar.raise_()
                self.inputGambar.raise_()
                self.trainData.raise_()
                self.verticalLayout_2.addWidget(self.frame_2)
                self.frame_3 = QtWidgets.QFrame(self.frame_input)
                self.frame_3.setStyleSheet("background-color: rgb(39, 44, 54);")
                self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
                self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
                self.frame_3.setObjectName("frame_3")
                self.hasilKlasifikasi = QtWidgets.QLabel(self.frame_3)
                self.hasilKlasifikasi.setGeometry(QtCore.QRect(70, 190, 171, 21))
                font = QtGui.QFont()
                font.setPointSize(9)
                font.setUnderline(True)
                self.hasilKlasifikasi.setFont(font)
                self.hasilKlasifikasi.setStyleSheet("color: rgb(255, 255, 255);")
                self.hasilKlasifikasi.setObjectName("hasilKlasifikasi")
                self.label_12 = QtWidgets.QLabel(self.frame_3)
                self.label_12.setGeometry(QtCore.QRect(40, 170, 31, 41))
                font = QtGui.QFont()
                font.setPointSize(8)
                font.setUnderline(True)
                self.label_12.setFont(font)
                self.label_12.setStyleSheet("color: rgb(255, 255, 255);")
                self.label_12.setText("")
                self.label_12.setPixmap(QtGui.QPixmap("../belajar_piton/icons/24x24/cil-camera.png"))
                self.label_12.setObjectName("label_12")
                self.label_5 = QtWidgets.QLabel(self.frame_3)
                self.label_5.setGeometry(QtCore.QRect(20, 10, 321, 31))
                font = QtGui.QFont()
                font.setFamily("MS Sans Serif")
                font.setPointSize(11)
                self.label_5.setFont(font)
                self.label_5.setStyleSheet("color: rgb(255, 255, 255);")
                self.label_5.setObjectName("label_5")
                self.label_15 = QtWidgets.QLabel(self.frame_3)
                self.label_15.setGeometry(QtCore.QRect(300, 80, 31, 41))
                font = QtGui.QFont()
                font.setPointSize(8)
                font.setUnderline(True)
                self.label_15.setFont(font)
                self.label_15.setStyleSheet("color: rgb(255, 255, 255);")
                self.label_15.setText("")
                self.label_15.setPixmap(QtGui.QPixmap("../belajar_piton/icons/24x24/cil-3d.png"))
                self.label_15.setObjectName("label_15")
                self.label_8 = QtWidgets.QLabel(self.frame_3)
                self.label_8.setGeometry(QtCore.QRect(40, 80, 31, 41))
                font = QtGui.QFont()
                font.setPointSize(8)
                font.setUnderline(True)
                self.label_8.setFont(font)
                self.label_8.setStyleSheet("color: rgb(255, 255, 255);")
                self.label_8.setText("")
                self.label_8.setPixmap(QtGui.QPixmap("../belajar_piton/icons/24x24/cil-chevron-double-up-alt.png"))
                self.label_8.setObjectName("label_8")
                self.label_11 = QtWidgets.QLabel(self.frame_3)
                self.label_11.setGeometry(QtCore.QRect(40, 150, 171, 21))
                font = QtGui.QFont()
                font.setPointSize(9)
                font.setUnderline(False)
                self.label_11.setFont(font)
                self.label_11.setStyleSheet("color: rgb(255, 255, 255);")
                self.label_11.setObjectName("label_11")
                self.tombol_reset = QtWidgets.QPushButton(self.frame_3)
                self.tombol_reset.setGeometry(QtCore.QRect(610, 220, 150, 30))
                self.tombol_reset.setMinimumSize(QtCore.QSize(150, 30))
                font = QtGui.QFont()
                font.setFamily("Segoe UI")
                font.setPointSize(9)
                self.tombol_reset.setFont(font)
                self.tombol_reset.setStyleSheet("QPushButton {\n"
        "    border: 2px solid rgb(52, 59, 72);\n"
        "    border-radius: 5px;    \n"
        "    background-color: rgb(52, 59, 72);\n"
        "    color: rgb(255, 255, 255);\n"
        "}\n"
        "QPushButton:hover {\n"
        "    background-color: rgb(57, 65, 80);\n"
        "    border: 2px solid rgb(61, 70, 86);\n"
        "}\n"
        "QPushButton:pressed {    \n"
        "    background-color: rgb(35, 40, 49);\n"
        "    border: 2px solid rgb(43, 50, 61);\n"
        "}")
                self.tombol_reset.setIcon(icon)
                self.tombol_reset.setObjectName("tombol_reset")
                self.verticalLayout_2.addWidget(self.frame_3)
                self.frame_hasil = QtWidgets.QFrame(self.konten)
                self.frame_hasil.setGeometry(QtCore.QRect(10, 10, 801, 571))
                self.frame_hasil.setStyleSheet("background-color: rgb(152, 177, 223);")
                self.frame_hasil.setFrameShape(QtWidgets.QFrame.StyledPanel)
                self.frame_hasil.setFrameShadow(QtWidgets.QFrame.Raised)
                self.frame_hasil.setObjectName("frame_hasil")
                self.verticalLayout = QtWidgets.QVBoxLayout(self.frame_hasil)
                self.verticalLayout.setObjectName("verticalLayout")
                self.frame = QtWidgets.QFrame(self.frame_hasil)
                self.frame.setStyleSheet("background-color: rgb(39, 44, 54);")
                self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
                self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
                self.frame.setObjectName("frame")
                self.label_7 = QtWidgets.QLabel(self.frame)
                self.label_7.setGeometry(QtCore.QRect(10, 10, 361, 31))
                font = QtGui.QFont()
                font.setFamily("MS Sans Serif")
                font.setPointSize(11)
                self.label_7.setFont(font)
                self.label_7.setStyleSheet("color: rgb(255, 255, 255);")
                self.label_7.setObjectName("label_7")
                self.label_9 = QtWidgets.QLabel(self.frame)
                self.label_9.setGeometry(QtCore.QRect(20, 260, 361, 31))
                font = QtGui.QFont()
                font.setFamily("MS Sans Serif")
                font.setPointSize(11)
                self.label_9.setFont(font)
                self.label_9.setStyleSheet("color: rgb(255, 255, 255);")
                self.label_9.setObjectName("label_9")
                self.tabel_fitur = QtWidgets.QTableWidget(self.frame_3)
                self.tabel_fitur.setGeometry(QtCore.QRect(20, 40, 737, 175))
                self.tabel_fitur.setObjectName("tabel_fitur")
                self.tabel_fitur.setColumnCount(10)
                self.tabel_fitur.setRowCount(0)
                item = QtWidgets.QTableWidgetItem()
                self.tabel_fitur.setHorizontalHeaderItem(0, item)
                item = QtWidgets.QTableWidgetItem()
                self.tabel_fitur.setHorizontalHeaderItem(1, item)
                item = QtWidgets.QTableWidgetItem()
                self.tabel_fitur.setHorizontalHeaderItem(2, item)
                item = QtWidgets.QTableWidgetItem()
                self.tabel_fitur.setHorizontalHeaderItem(3, item)
                item = QtWidgets.QTableWidgetItem()
                self.tabel_fitur.setHorizontalHeaderItem(4, item)
                item = QtWidgets.QTableWidgetItem()
                self.tabel_fitur.setHorizontalHeaderItem(5, item)
                item = QtWidgets.QTableWidgetItem()
                self.tabel_fitur.setHorizontalHeaderItem(6, item)
                item = QtWidgets.QTableWidgetItem()
                self.tabel_fitur.setHorizontalHeaderItem(7, item)
                item = QtWidgets.QTableWidgetItem()
                self.tabel_fitur.setHorizontalHeaderItem(8, item)
                item = QtWidgets.QTableWidgetItem()
                self.tabel_fitur.setHorizontalHeaderItem(9, item)
                self.tabel_euclidian = QtWidgets.QTableWidget(self.frame)
                self.tabel_euclidian.setGeometry(QtCore.QRect(20, 50, 741, 192))
                self.tabel_euclidian.setObjectName("tabel_euclidian")
                self.tabel_euclidian.setColumnCount(3)
                self.tabel_euclidian.setRowCount(0)
                item = QtWidgets.QTableWidgetItem()
                self.tabel_euclidian.setHorizontalHeaderItem(0, item)
                item = QtWidgets.QTableWidgetItem()
                self.tabel_euclidian.setHorizontalHeaderItem(1, item)
                item = QtWidgets.QTableWidgetItem()
                self.tabel_euclidian.setHorizontalHeaderItem(2, item)
                self.tabel_euclidian.setColumnWidth(0,230)
                self.tabel_euclidian.setColumnWidth(1,230)
                self.tabel_euclidian.setColumnWidth(2,220)

                self.tabel_klasifikasi = QtWidgets.QTableWidget(self.frame)
                self.tabel_klasifikasi.setGeometry(QtCore.QRect(20, 300, 741, 192))
                self.tabel_klasifikasi.setObjectName("tabel_klasifikasi")
                self.tabel_klasifikasi.setColumnCount(5)
                self.tabel_klasifikasi.setRowCount(0)
                item = QtWidgets.QTableWidgetItem()
                self.tabel_klasifikasi.setHorizontalHeaderItem(0, item)
                item = QtWidgets.QTableWidgetItem()
                self.tabel_klasifikasi.setHorizontalHeaderItem(1, item)
                item = QtWidgets.QTableWidgetItem()
                self.tabel_klasifikasi.setHorizontalHeaderItem(2, item)
                item = QtWidgets.QTableWidgetItem()
                self.tabel_klasifikasi.setHorizontalHeaderItem(3, item)
                item = QtWidgets.QTableWidgetItem()
                self.tabel_klasifikasi.setHorizontalHeaderItem(4, item)

                self.tabel_klasifikasi.setColumnWidth(0,140)
                self.tabel_klasifikasi.setColumnWidth(1,130)
                self.tabel_klasifikasi.setColumnWidth(2,140)
                self.tabel_klasifikasi.setColumnWidth(3,140)
                self.tabel_klasifikasi.setColumnWidth(4,140)
                
                self.verticalLayout.addWidget(self.frame)
                self.frame_akurasi = QtWidgets.QFrame(self.konten)
                self.frame_akurasi.setGeometry(QtCore.QRect(10, 9, 801, 571))
                self.frame_akurasi.setStyleSheet("background-color: rgb(39, 44, 54);")
                self.frame_akurasi.setFrameShape(QtWidgets.QFrame.StyledPanel)
                self.frame_akurasi.setFrameShadow(QtWidgets.QFrame.Raised)
                self.frame_akurasi.setObjectName("frame_akurasi")
                self.tampilnilaiK = QtWidgets.QComboBox(self.frame_akurasi)
                self.tampilnilaiK.setGeometry(QtCore.QRect(20, 60, 110, 30))
                self.tampilnilaiK.setStyleSheet("border: 2px solid rgb(52, 59, 72);\n"
        "border-radius: 5px;    \n"
        "background-color: rgb(52, 59, 72);\n"
        "color: rgb(255, 255, 255);")
                self.tampilnilaiK.setObjectName("tampilnilaiK")
                self.tampilnilaiK.addItem("")
                self.tampilnilaiK.raise_()
                self.tabel_akurasi = QtWidgets.QTableWidget(self.frame_akurasi)
                self.tabel_akurasi.setGeometry(QtCore.QRect(20, 110, 760, 300))
                self.tabel_akurasi.setObjectName("tabel_akurasi")
                self.tabel_akurasi.setColumnCount(4)
                self.tabel_akurasi.setRowCount(0)
                item = QtWidgets.QTableWidgetItem()
                self.tabel_akurasi.setHorizontalHeaderItem(0, item)
                item = QtWidgets.QTableWidgetItem()
                self.tabel_akurasi.setHorizontalHeaderItem(1, item)
                item = QtWidgets.QTableWidgetItem()
                self.tabel_akurasi.setHorizontalHeaderItem(2, item)
                item = QtWidgets.QTableWidgetItem()
                self.tabel_akurasi.setHorizontalHeaderItem(3, item)

                self.tabel_akurasi.setColumnWidth(0,180)
                self.tabel_akurasi.setColumnWidth(1,150)
                self.tabel_akurasi.setColumnWidth(2,180)
                self.tabel_akurasi.setColumnWidth(3,180)

                self.tombol_inputK = QtWidgets.QPushButton(self.frame_akurasi)
                self.tombol_inputK.setGeometry(QtCore.QRect(150, 60, 150, 30))
                self.tombol_inputK.setMinimumSize(QtCore.QSize(150, 30))
                font = QtGui.QFont()
                font.setFamily("Segoe UI")
                font.setPointSize(9)
                self.tombol_inputK.setFont(font)
                self.tombol_inputK.setStyleSheet("QPushButton {\n"
        "    border: 2px solid rgb(52, 59, 72);\n"
        "    border-radius: 5px;    \n"
        "    background-color: rgb(52, 59, 72);\n"
        "    color: rgb(255, 255, 255);\n"
        "}\n"
        "QPushButton:hover {\n"
        "    background-color: rgb(57, 65, 80);\n"
        "    border: 2px solid rgb(61, 70, 86);\n"
        "}\n"
        "QPushButton:pressed {    \n"
        "    background-color: rgb(35, 40, 49);\n"
        "    border: 2px solid rgb(43, 50, 61);\n"
        "}")
                self.tombol_inputK.setIcon(icon)
                self.tombol_inputK.setObjectName("tombol_inputK")

                self.tombol_reset1 = QtWidgets.QPushButton(self.frame_akurasi)
                self.tombol_reset1.setGeometry(QtCore.QRect(625, 525, 150, 30))
                self.tombol_reset1.setMinimumSize(QtCore.QSize(150, 30))
                font = QtGui.QFont()
                font.setFamily("Segoe UI")
                font.setPointSize(9)
                self.tombol_reset1.setFont(font)
                self.tombol_reset1.setStyleSheet("QPushButton {\n"
        "    border: 2px solid rgb(52, 59, 72);\n"
        "    border-radius: 5px;    \n"
        "    background-color: rgb(52, 59, 72);\n"
        "    color: rgb(255, 255, 255);\n"
        "}\n"
        "QPushButton:hover {\n"
        "    background-color: rgb(57, 65, 80);\n"
        "    border: 2px solid rgb(61, 70, 86);\n"
        "}\n"
        "QPushButton:pressed {    \n"
        "    background-color: rgb(35, 40, 49);\n"
        "    border: 2px solid rgb(43, 50, 61);\n"
        "}")
                self.tombol_reset1.setIcon(icon)
                self.tombol_reset1.setObjectName("tombol_reset1")

                self.label_10 = QtWidgets.QLabel(self.frame_akurasi)
                self.label_10.setGeometry(QtCore.QRect(20, 10, 411, 41))
                font = QtGui.QFont()
                font.setFamily("MS UI Gothic")
                font.setPointSize(11)
                font.setBold(True)
                font.setWeight(75)
                self.label_10.setFont(font)
                self.label_10.setStyleSheet("color:white;")
                self.label_10.setObjectName("label_10")
                self.label_13 = QtWidgets.QLabel(self.frame_akurasi)
                self.label_13.setGeometry(QtCore.QRect(560, 450, 171, 21))
                font = QtGui.QFont()
                font.setPointSize(9)
                font.setUnderline(False)
                self.label_13.setFont(font)
                self.label_13.setStyleSheet("color: rgb(255, 255, 255);")
                self.label_13.setObjectName("label_13")
                self.label_14 = QtWidgets.QLabel(self.frame_akurasi)
                self.label_14.setGeometry(QtCore.QRect(560, 470, 31, 41))
                font = QtGui.QFont()
                font.setPointSize(8)
                font.setUnderline(True)
                self.label_14.setFont(font)
                self.label_14.setStyleSheet("color: rgb(255, 255, 255);")
                self.label_14.setText("")
                self.label_14.setPixmap(QtGui.QPixmap("../belajar_piton/icons/24x24/cil-chevron-double-up-alt.png"))
                self.label_14.setObjectName("label_14")
                self.tingkat_akurasi = QtWidgets.QLabel(self.frame_akurasi)
                self.tingkat_akurasi.setGeometry(QtCore.QRect(590, 490, 171, 21))
                font = QtGui.QFont()
                font.setPointSize(9)
                font.setUnderline(True)
                self.tingkat_akurasi.setFont(font)
                self.tingkat_akurasi.setStyleSheet("color: rgb(255, 255, 255);")
                self.tingkat_akurasi.setObjectName("tingkat_akurasi")
                self.label_17 = QtWidgets.QLabel(self.frame_akurasi)
                self.label_17.setGeometry(QtCore.QRect(90, 450, 171, 21))
                font = QtGui.QFont()
                font.setPointSize(9)
                font.setUnderline(False)
                self.label_17.setFont(font)
                self.label_17.setStyleSheet("color: rgb(255, 255, 255);")
                self.label_17.setObjectName("label_17")
                self.jumlah_benar = QtWidgets.QLabel(self.frame_akurasi)
                self.jumlah_benar.setGeometry(QtCore.QRect(160, 490, 171, 21))
                font = QtGui.QFont()
                font.setPointSize(9)
                font.setUnderline(True)
                self.jumlah_benar.setFont(font)
                self.jumlah_benar.setStyleSheet("color: rgb(255, 255, 255);")
                self.jumlah_benar.setObjectName("jumlah_benar")
                self.label_18 = QtWidgets.QLabel(self.frame_akurasi)
                self.label_18.setGeometry(QtCore.QRect(90, 470, 31, 41))
                font = QtGui.QFont()
                font.setPointSize(8)
                font.setUnderline(True)
                self.label_18.setFont(font)
                self.label_18.setStyleSheet("color: rgb(255, 255, 255);")
                self.label_18.setText("")
                self.label_18.setPixmap(QtGui.QPixmap("../belajar_piton/icons/24x24/cil-chevron-double-up-alt.png"))
                self.label_18.setObjectName("label_18")
                self.gridLayout.addWidget(self.konten, 1, 1, 2, 1)
                self.frame_top = QtWidgets.QFrame(self.centralwidget)
                self.frame_top.setMaximumSize(QtCore.QSize(16777215, 45))
                self.frame_top.setAcceptDrops(False)
                self.frame_top.setStyleSheet("background-color: rgb(35, 35, 35);")
                self.frame_top.setFrameShape(QtWidgets.QFrame.StyledPanel)
                self.frame_top.setFrameShadow(QtWidgets.QFrame.Raised)
                self.frame_top.setObjectName("frame_top")
                self.label_3 = QtWidgets.QLabel(self.frame_top)
                self.label_3.setGeometry(QtCore.QRect(20, 10, 411, 31))
                font = QtGui.QFont()
                font.setFamily("MS UI Gothic")
                font.setPointSize(11)
                font.setBold(True)
                font.setWeight(75)
                self.label_3.setFont(font)
                self.label_3.setStyleSheet("color:white;")
                self.label_3.setObjectName("label_3")
                self.gridLayout.addWidget(self.frame_top, 0, 0, 1, 2)
                self.frame_menu = QtWidgets.QFrame(self.centralwidget)
                self.frame_menu.setMaximumSize(QtCore.QSize(170, 16777215))
                self.frame_menu.setStyleSheet("#frame_menu{\n"
        "    \n"
        "    \n"
        "    background-color: rgb(27, 29, 35);\n"
        "}\n"
        "QPushButton{\n"
        "    background-color: rgb(27, 29, 35);\n"
        "    border:none;\n"
        "}\n"
        "QPushButton:hover{\n"
        "    background-color: rgb(76, 76, 76);\n"
        "\n"
        "}\n"
        "QPushButton:pressed {    \n"
        "    background-color: rgb(35, 40, 49);\n"
        "    border: 2px solid rgb(43, 50, 61);\n"
        "}")
                self.frame_menu.setFrameShape(QtWidgets.QFrame.StyledPanel)
                self.frame_menu.setFrameShadow(QtWidgets.QFrame.Raised)
                self.frame_menu.setObjectName("frame_menu")
                self.menuHasil = QtWidgets.QPushButton(self.frame_menu)
                self.menuHasil.setGeometry(QtCore.QRect(0, 130, 171, 41))
                font = QtGui.QFont()
                font.setPointSize(12)
                self.menuHasil.setFont(font)
                self.menuHasil.setStyleSheet("border: none;\n"
        "color:white;")
                icon1 = QtGui.QIcon()
                icon1.addPixmap(QtGui.QPixmap("../belajar_piton/icons/24x24/cil-4k.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                self.menuHasil.setIcon(icon1)
                self.menuHasil.setObjectName("menuHasil")
                self.menuInput = QtWidgets.QPushButton(self.frame_menu)
                self.menuInput.setGeometry(QtCore.QRect(0, 60, 171, 41))
                font = QtGui.QFont()
                font.setPointSize(12)
                self.menuInput.setFont(font)
                self.menuInput.setStyleSheet("border: none;\n"
        "color:white;")
                icon2 = QtGui.QIcon()
                icon2.addPixmap(QtGui.QPixmap("../belajar_piton/icons/24x24/cil-description.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                self.menuInput.setIcon(icon2)
                self.menuInput.setObjectName("menuInput")
                self.menuAkurasi = QtWidgets.QPushButton(self.frame_menu)
                self.menuAkurasi.setGeometry(QtCore.QRect(0, 200, 171, 41))
                font = QtGui.QFont()
                font.setPointSize(12)
                self.menuAkurasi.setFont(font)
                self.menuAkurasi.setStyleSheet("border: none;\n"
        "color:white;")
                self.menuAkurasi.setIcon(icon1)
                self.menuAkurasi.setObjectName("menuAkurasi")
                self.menuInput.raise_()
                self.menuHasil.raise_()
                self.menuAkurasi.raise_()
                self.gridLayout.addWidget(self.frame_menu, 1, 0, 2, 1)
                self.frame_menu.raise_()
                self.frame_top.raise_()
                self.konten.raise_()
                MainWindow.setCentralWidget(self.centralwidget)

                self.retranslateUi(MainWindow)
                QtCore.QMetaObject.connectSlotsByName(MainWindow)

                self.inputGambar.clicked.connect(self.getimg)
                self.trainData.clicked.connect(self.train_data)
                self.tombolInput.clicked.connect(self.color_moment)
                self.tombol_reset.clicked.connect(self.get_reset)
                self.tombol_inputK.clicked.connect(self.get_inputK)  
                self.tombol_reset1.clicked.connect(self.get_reset1)       

                # untuk menampilkan citra testing pada comboBox============================
                sql="SELECT nama_dataset FROM tb_dataset WHERE status='Testing'"
                cursor.execute(sql)
                data_test = cursor.fetchall()
                for i in data_test:
                        data=i[0]
                        self.tampilgambar.addItem(data)
                # -------------------------------------------------------------------------

                # untuk menampilkan nilai K pada comboBox============================
                sql="SELECT nama_k FROM tb_k"
                cursor.execute(sql)
                data_test = cursor.fetchall()
                for i in data_test:
                        data=i[0]
                        self.tampilnilaiK.addItem(data)
                # -------------------------------------------------------------------------

        # untuk mengulang training
        def get_reset(self):
                self.citraInput.clear()
                self.tampilgambar.setCurrentText("Pilih Data Testing")
                delet="DELETE FROM tb_cm"
                cursor.execute(delet)
                db.commit()
                # menampilkan nilai fitur data training
                self.tabel_fitur.setRowCount(0)
                sql_tabel_fitur="SELECT tb_dataset.nama_dataset, tb_cm.meanH, tb_cm.meanS, tb_cm.meanV, tb_cm.standevH, tb_cm.standevS, tb_cm.standevV, tb_cm.skewH, tb_cm.skewS, tb_cm.skewV FROM tb_dataset, tb_cm WHERE tb_dataset.id_dataset=tb_cm.id_dataset"
                cursor.execute(sql_tabel_fitur)
                tabel_ft=cursor.fetchall()
                for row_number, row_data in enumerate(tabel_ft):
                        self.tabel_fitur.insertRow(row_number)
                        for column_number, data in enumerate(row_data):
                                self.tabel_fitur.setStyleSheet("background-color: rgb(255, 255, 255);")
                                self.tabel_fitur.setItem(row_number, column_number, QtWidgets.QTableWidgetItem(str(data)))
        # =================================================================================================================

        # untuk melihat akurasi berdasarkan k
        def get_inputK(self):
                nilaiK = self.tampilnilaiK.currentText()
                if nilaiK=="Pilih Nilai K":
                        msg = QMessageBox()
                        msg.setWindowTitle("info")
                        msg.setText(nilaiK+" bukan nilai k")
                        msg.setStandardButtons(QMessageBox.Ok)
                        y = msg.exec_()
                else :
                        self.tabel_akurasi.setRowCount(0)
                        sql_tabel_akurasi="SELECT nama_dataset,nilai_k, hasil_klasifikasi,status_klasifikasi from tb_klasifikasi where nilai_k=('"+nilaiK+"')"
                        cursor.execute(sql_tabel_akurasi)
                        tabel_akurasii=cursor.fetchall()
                        jmlh=len(tabel_akurasii)
                        # print(jumlah)
                        # jika data sudah ada di database
                        if jmlh<1:
                                msg = QMessageBox()
                                msg.setWindowTitle("Eror")
                                msg.setText("Belum ada akurasi !")
                                msg.setStandardButtons(QMessageBox.Ok)
                                x = msg.exec_()
                        else :
                                for row_number, row_data in enumerate(tabel_akurasii):
                                        self.tabel_akurasi.insertRow(row_number)
                                        for column_number, data in enumerate(row_data):
                                                self.tabel_akurasi.setStyleSheet("background-color: rgb(255, 255, 255);")
                                                self.tabel_akurasi.setItem(row_number, column_number, QtWidgets.QTableWidgetItem(str(data)))
                                sql_benar="SELECT * from tb_klasifikasi where status_klasifikasi='Benar'and nilai_k=('"+nilaiK+"')"
                                cursor.execute(sql_benar)
                                total_benar=cursor.fetchall()
                                totalBenar=len(total_benar)
                                sql_totTest="SELECT * from tb_klasifikasi where nilai_k=('"+nilaiK+"')"
                                cursor.execute(sql_totTest)
                                totTest=cursor.fetchall()
                                totalTest=len(totTest)
                                akurasi = (totalBenar/totalTest)*100
                                akr = round(akurasi,2)
                                total_akurasi = str(akr)+"%"
                                self.tingkat_akurasi.setText(total_akurasi)
                                self.jumlah_benar.setText(str(totalBenar))
        # =================================================================================================================

        # untuk mengulang klasifikasi
        def get_reset1(self):
                self.tingkat_akurasi.setText("0.0%")
                self.jumlah_benar.setText("0")
                self.citraInput.clear()
                self.tampilgambar.setCurrentText("Pilih Data Testing")
                self.tampilnilaiK.setCurrentText("Pilih Nilai K")
                delet="DELETE FROM tb_klasifikasi"
                delet1="DELETE FROM tb_euclidian"
                cursor.execute(delet)
                cursor.execute(delet1)
                db.commit()
                # menampilkan hasil klasifikasi
                self.tabel_akurasi.setRowCount(0)
                sql_tabel_akurasi="SELECT nama_dataset,hasil_klasifikasi,status_klasifikasi from tb_klasifikasi"
                cursor.execute(sql_tabel_akurasi)
                tabel_akurasii=cursor.fetchall()
                for row_number, row_data in enumerate(tabel_akurasii):
                        self.tabel_akurasi.insertRow(row_number)
                        for column_number, data in enumerate(row_data):
                                self.tabel_akurasi.setStyleSheet("background-color: rgb(255, 255, 255);")
                                self.tabel_akurasi.setItem(row_number, column_number, QtWidgets.QTableWidgetItem(str(data)))
        # =================================================================================================================

        # untuk mentraining data
        def train_data(self):
                query="SELECT tb_cm.id_dataset, tb_dataset.id_dataset FROM tb_cm, tb_dataset WHERE tb_cm.id_dataset= tb_dataset.id_dataset AND tb_dataset.status='Training'"
                cursor.execute(query)
                train = cursor.fetchall()
                jumlah=len(train)
                if jumlah>0:
                        msg = QMessageBox()
                        msg.setWindowTitle("info")
                        msg.setText("Data sudah di training !")
                        msg.setStandardButtons(QMessageBox.Ok)
                        y = msg.exec_()
                else:
                        sql_dataTest = "SELECT id_dataset,nama_dataset,id_jenis FROM tb_dataset WHERE status='Training'"  #membaca citra training
                        cursor.execute(sql_dataTest)
                        hasilTrain = cursor.fetchall()
                        sql_row="SELECT id_cm FROM tb_cm"
                        cursor.execute(sql_row)
                        row = cursor.fetchall()
                        jumlah_cm=len(row)

                        for rs in hasilTrain:
                                no_dataset = rs[0]
                                jumlah_cm+=1
                                img = rs[1]
                                no_jenis = rs[2]
                                print(no_dataset)
                                image1 = plt.imread('Dataset/'+img) #membaca citra
                                hsv1 = colors.rgb_to_hsv(image1/255) #mengubah ke hsv
                                plt.imsave('Citra_HSV/'+img,hsv1)
                                img1 = np.asarray(hsv1)
                                img1 = img1.astype('float')
                                H1 = img1[:, :, 0]
                                S1 = img1[:, :, 1]
                                V1 = img1[:, :, 2]
                                print("H   :", H1)
                                print()
                                print("S   :", S1)
                                print()
                                print("V   :", V1)
                                meanH1 = np.mean(H1)
                                meanS1 = np.mean(S1)
                                meanV1 = np.mean(V1)
                                standevH1 = np.std(H1)
                                standevS1 = np.std(S1)
                                standevV1 = np.std(V1)
                                differenceH1 = 0.0
                                differenceS1 = 0.0
                                differenceV1 = 0.0

                                for i in range(len(img1)):
                                        for j in range(len(img1[0])):
                                                differenceH1 = differenceH1 + np.float_power((H1[i][j] - meanH1), 3)
                                                differenceS1 = differenceS1 + np.float_power((S1[i][j] - meanS1), 3)
                                                differenceV1 = differenceV1 + np.float_power((V1[i][j] - meanV1), 3)
                                        N = len(img1) * len(img1[0])

                                difH1 = differenceH1/N
                                difS1 = differenceS1/N
                                difV1 = differenceV1/N

                                skewH1= difH1/np.float_power((standevH1), 3)
                                skewS1 = difS1/np.float_power((standevS1), 3)
                                skewV1 = difV1/np.float_power((standevV1), 3)

                                sql_cm = "INSERT INTO tb_cm VALUES ('"+str(jumlah_cm)+"','"+str(meanH1)+"','"+str(meanS1)+"','"+str(meanV1)+"','"+str(standevH1)+"','"+str(standevS1)+"','"+str(standevV1)+"','"+str(skewH1)+"','"+str(skewS1)+"','"+str(skewV1)+"','"+str(no_dataset)+"','"+str(no_jenis)+"')"
                                cursor.execute(sql_cm)
                                db.commit()
                        # menampilkan nilai fitur data training
                        self.tabel_fitur.setRowCount(0)
                        sql_tabel_fitur="SELECT tb_dataset.nama_dataset, tb_cm.meanH, tb_cm.meanS, tb_cm.meanV, tb_cm.standevH, tb_cm.standevS, tb_cm.standevV, tb_cm.skewH, tb_cm.skewS, tb_cm.skewV FROM tb_dataset, tb_cm WHERE tb_dataset.id_dataset=tb_cm.id_dataset"
                        cursor.execute(sql_tabel_fitur)
                        tabel_ft=cursor.fetchall()
                        for row_number, row_data in enumerate(tabel_ft):
                                self.tabel_fitur.insertRow(row_number)
                                for column_number, data in enumerate(row_data):
                                        self.tabel_fitur.setStyleSheet("background-color: rgb(255, 255, 255);")
                                        self.tabel_fitur.setItem(row_number, column_number, QtWidgets.QTableWidgetItem(str(data)))
         # ===============================================================================================================================

        # untuk menampilkan gambar sesuai dari data yang dipilih pada comboBox
        def getimg(self):
                imgName = self.tampilgambar.currentText()
                imagePath=os.getcwd()+"/Dataset/"+imgName
                pixmap=QPixmap(imagePath)
                self.citraInput.setPixmap(QPixmap(pixmap))
                # self.tableWidget.clearContents()
                # self.tableWidget.setRowCount(0)
        # -------------------------------------------------------------------------------------

        # start color moment pada data uji 
        def color_moment(self):
                query="SELECT id_cm FROM tb_cm"
                cursor.execute(query)
                train = cursor.fetchall()
                jumlah=len(train)
                if jumlah<=0:
                        msg = QMessageBox()
                        msg.setWindowTitle("info")
                        msg.setText("Belum ada data yang di training !")
                        msg.setStandardButtons(QMessageBox.Ok)
                        y = msg.exec_()
                else :
                        # untuk mengecek apakah data yang dipilih sudah ada didatabase atau belum
                        imgTest = self.tampilgambar.currentText()
                        query="SELECT data_testing FROM tb_euclidian WHERE data_testing=('"+imgTest+"')"
                        cursor.execute(query)
                        test = cursor.fetchall()
                        jumlah=len(test)
                        # print(jumlah)
                        # jika data sudah ada di database
                        if jumlah>0:
                                print("data sudah ada")
                                msg = QMessageBox()
                                msg.setWindowTitle("Eror")
                                msg.setText("Data sudah ada !")
                                msg.setStandardButtons(QMessageBox.Ok)
                                x = msg.exec_()
                        # =============================================
                        # jika citra belum ada di database
                        else:
                                db._open_connection()
                                print("berhasil yey")
                                if imgTest=="Pilih Data Testing":
                                        msg = QMessageBox()
                                        msg.setWindowTitle("info")
                                        msg.setText(imgTest+" bukan dataset")
                                        msg.setStandardButtons(QMessageBox.Ok)
                                        y = msg.exec_()
                                else:
                                        # mengakses nmor baris terakhir pada data  euclidian
                                        sql_row="SELECT id_euclidian FROM tb_euclidian ORDER BY id_euclidian DESC LIMIT 1"
                                        cursor.execute(sql_row)
                                        row = cursor.fetchall()
                                        jumlah_euclidian = 0
                                        for a in row:
                                                jumlah_euclidian=a[0] 
                                        # ===================================================
                                        # menampilkan id dataset dari dataset citra testing yang dipilih
                                        sql_dataTest = "SELECT id_dataset,id_jenis FROM tb_dataset WHERE status='Testing' and nama_dataset='"+imgTest+"'"
                                        cursor.execute(sql_dataTest)
                                        hasilTest = cursor.fetchall()
                                        # no_dataset=hasilTest
                                        # =====================================================
                                        for rs in hasilTest:
                                                no_dataset = rs[0]
                                                # dataTest = rs[1]
                                                no_jenis = rs[1]
                                        # if imgTest == dataTest:
                                        print(no_dataset)
                                        # proses membaca citra, mengubah ke hsv
                                        image1 = plt.imread('Dataset/'+imgTest) #membaca citra
                                        hsv1 = colors.rgb_to_hsv(image1/255) #mengubah ke hsv
                                        plt.imsave('Citra_HSV/'+imgTest,hsv1)
                                        img1 = np.asarray(hsv1)
                                        img1 = img1.astype('float')
                                        H1 = img1[:, :, 0]
                                        S1 = img1[:, :, 1]
                                        V1 = img1[:, :, 2]
                                        meanH1 = np.mean(H1)
                                        meanS1 = np.mean(S1)
                                        meanV1 = np.mean(V1)
                                        standevH1 = np.std(H1)
                                        standevS1 = np.std(S1)
                                        standevV1 = np.std(V1)
                                        differenceH1 = 0.0
                                        differenceS1 = 0.0
                                        differenceV1 = 0.0

                                        for i in range(len(img1)):
                                                for j in range(len(img1[0])):
                                                        differenceH1 = differenceH1 + np.float_power((H1[i][j] - meanH1), 3)
                                                        differenceS1 = differenceS1 + np.float_power((S1[i][j] - meanS1), 3)
                                                        differenceV1 = differenceV1 + np.float_power((V1[i][j] - meanV1), 3)
                                                N = len(img1) * len(img1[0])

                                        difH1 = differenceH1/N
                                        difS1 = differenceS1/N
                                        difV1 = differenceV1/N

                                        skewH1= difH1/np.float_power((standevH1), 3)
                                        skewS1 = difS1/np.float_power((standevS1), 3)
                                        skewV1 = difV1/np.float_power((standevV1), 3)
                                        # ====================================================================

                                        # mengakses data training
                                        sql_dataTrain = "SELECT tb_dataset.nama_dataset,tb_cm.id_jenis,tb_cm.meanH,tb_cm.meanS,tb_cm.meanV,tb_cm.standevH,tb_cm.standevS,tb_cm.standevV,tb_cm.skewH,tb_cm.skewS,tb_cm.skewV FROM tb_dataset, tb_cm WHERE tb_cm.id_dataset = tb_dataset.id_dataset"
                                        cursor.execute(sql_dataTrain)
                                        hasilTrain = cursor.fetchall()
                                        print("\n")
                                        print("no   data test          data training            Euclidian")
                                        for i in hasilTrain:
                                                dataTrain = i[0]
                                                no_idJenis=i[1]
                                                meanH2=i[2]
                                                meanS2=i[3]
                                                meanV2=i[4]
                                                standevH2=i[5]
                                                standevS2=i[6]
                                                standevV2=i[7]
                                                skewH2=i[8]
                                                skewS2=i[9]
                                                skewV2=i[10]

                                                sql_hasilCM="select nama_penyakit from tb_jenis where id_jenis='"+str(no_idJenis)+"'"
                                                cursor.execute(sql_hasilCM)
                                                hasilCM=cursor.fetchall()
                                                for a in hasilCM:
                                                        jenis_hasilCM=a[0]

                                                dst1 = np.array((meanH1, meanS1, meanV1, standevH1, standevS1, standevV1, skewH1, skewS1, skewV1))
                                                dst2 = np.array((meanH2, meanS2, meanV2, standevH2, standevS2, standevV2, skewH2, skewS2, skewV2))
                                                dstall = np.linalg.norm(dst1 - dst2)
                                                jumlah_euclidian+=1
                                                
                                                ## menyimpan data tb_euclidian ke database
                                                sql_tm="INSERT INTO tb_euclidian VALUES ('"+str(jumlah_euclidian)+"','"+imgTest+"','"+dataTrain+"','"+str(dstall)+"','"+jenis_hasilCM+"','"+str(no_dataset)+"','"+str(no_jenis)+"')"
                                                cursor.execute(sql_tm)
                                                db.commit()
                                                
                                                # =======================================
                                                print(str(jumlah_euclidian)+"   "+imgTest+"        "+dataTrain+"            "+str(dstall))
                                                print("----------------------------------------------------------")
                                                
                                        # # ---------------end export--------------------------------
                                        
                                        # # #  ----------------fknn start k=3-------------------------------
                                        k1=3
                                        sqlu  = "SELECT POW(euclidian,-2) AS pangkat, hasil_cm FROM tb_euclidian where data_testing=('"+imgTest+"') order by euclidian asc limit 3"
                                        cursor.execute(sqlu)
                                        row  = cursor.fetchall()

                                        df = pd.DataFrame(row, columns = ['Nilai', 'Kelas'])
                                        jumlah = df.Nilai.sum()
                                        group = df.groupby(['Kelas']).sum().reset_index()
                                        group.Nilai.mul(3, fill_value=0).reset_index()
                                        group["Bagi"] = group.Nilai.div(jumlah)

                                        arr= group.to_numpy()
                                        columnIndex = 2
                                        sortedArr = arr[arr[:,columnIndex].argsort()[::-1]]

                                        hasil_kelas=str(sortedArr[0][0])

                                        nilaifknn = sortedArr[0][2]

                                        if hasil_kelas=="Bercak":
                                                id_jenis=1
                                        elif hasil_kelas=="Hawar":
                                                id_jenis=2
                                        elif hasil_kelas=="Karat":
                                                id_jenis=3
                                        
                                        sql_jenis="SELECT id_dataset,id_jenis from tb_dataset where nama_dataset=('"+imgTest+"')"
                                        cursor.execute(sql_jenis)
                                        hasilJenis = cursor.fetchall()
                                        for i in hasilJenis:
                                                nomor_dataset=i[0]
                                                noIdjenis=i[1]
                                                # print("id jenis = "+str(noIdjenis))
                                                if id_jenis==noIdjenis:
                                                        status_kelas="Benar"
                                                else:
                                                        status_kelas="Salah"

                                        print("hasil_klasifikasi = "+hasil_kelas+", status= "+status_kelas)

                                        query_jumlah="SELECT id_klasifikasi FROM tb_klasifikasi order by id_klasifikasi desc limit 1"
                                        cursor.execute(query_jumlah)
                                        q_jumlah = cursor.fetchall()
                                        jumlah_klasifikasi=0
                                        for b in q_jumlah:
                                                jumlah_klasifikasi=b[0]

                                        jumlah_klasifikasi+=1
                                        sql_fknn="INSERT INTO tb_klasifikasi VALUES ('"+str(jumlah_klasifikasi)+"','"+imgTest+"','"+str(k1)+"','"+str(nilaifknn)+"','"+hasil_kelas+"','"+status_kelas+"','"+str(nomor_dataset)+"','"+str(noIdjenis)+"')"
                                        cursor.execute(sql_fknn)
                                        db.commit()
                                
                                        # # #  ----------------fknn start k=5-------------------------------
                                        k2=5
                                        sqlu  = "SELECT POW(euclidian,-2) AS pangkat, hasil_cm FROM tb_euclidian where data_testing=('"+imgTest+"') order by euclidian asc limit 5"
                                        cursor.execute(sqlu)
                                        row  = cursor.fetchall()

                                        df = pd.DataFrame(row, columns = ['Nilai', 'Kelas'])
                                        jumlah = df.Nilai.sum()
                                        group = df.groupby(['Kelas']).sum().reset_index()
                                        group.Nilai.mul(3, fill_value=0).reset_index()
                                        group["Bagi"] = group.Nilai.div(jumlah)

                                        arr= group.to_numpy()
                                        columnIndex = 2
                                        sortedArr = arr[arr[:,columnIndex].argsort()[::-1]]

                                        hasil_kelas=str(sortedArr[0][0])

                                        nilaifknn = sortedArr[0][2]

                                        if hasil_kelas=="Bercak":
                                                id_jenis=1
                                        elif hasil_kelas=="Hawar":
                                                id_jenis=2
                                        elif hasil_kelas=="Karat":
                                                id_jenis=3
                                        
                                        sql_jenis="SELECT id_dataset,id_jenis from tb_dataset where nama_dataset=('"+imgTest+"')"
                                        cursor.execute(sql_jenis)
                                        hasilJenis = cursor.fetchall()
                                        for i in hasilJenis:
                                                nomor_dataset=i[0]
                                                noIdjenis=i[1]
                                                # print("id jenis = "+str(noIdjenis))
                                                if id_jenis==noIdjenis:
                                                        status_kelas="Benar"
                                                else:
                                                        status_kelas="Salah"

                                        print("hasil_klasifikasi = "+hasil_kelas+", status= "+status_kelas)

                                        query_jumlah="SELECT id_klasifikasi FROM tb_klasifikasi order by id_klasifikasi desc limit 1"
                                        cursor.execute(query_jumlah)
                                        q_jumlah = cursor.fetchall()
                                        jumlah_klasifikasi=0
                                        for b in q_jumlah:
                                                jumlah_klasifikasi=b[0]

                                        jumlah_klasifikasi+=1
                                        sql_fknn="INSERT INTO tb_klasifikasi VALUES ('"+str(jumlah_klasifikasi)+"','"+imgTest+"','"+str(k2)+"','"+str(nilaifknn)+"','"+hasil_kelas+"','"+status_kelas+"','"+str(nomor_dataset)+"','"+str(noIdjenis)+"')"
                                        cursor.execute(sql_fknn)
                                        db.commit()

                                        # # #  ----------------fknn start k=7-------------------------------
                                        k3=7
                                        sqlu  = "SELECT POW(euclidian,-2) AS pangkat, hasil_cm FROM tb_euclidian where data_testing=('"+imgTest+"') order by euclidian asc limit 7"
                                        cursor.execute(sqlu)
                                        row  = cursor.fetchall()

                                        df = pd.DataFrame(row, columns = ['Nilai', 'Kelas'])
                                        jumlah = df.Nilai.sum()
                                        group = df.groupby(['Kelas']).sum().reset_index()
                                        group.Nilai.mul(3, fill_value=0).reset_index()
                                        group["Bagi"] = group.Nilai.div(jumlah)

                                        arr= group.to_numpy()
                                        columnIndex = 2
                                        sortedArr = arr[arr[:,columnIndex].argsort()[::-1]]

                                        hasil_kelas=str(sortedArr[0][0])

                                        nilaifknn = sortedArr[0][2]

                                        if hasil_kelas=="Bercak":
                                                id_jenis=1
                                        elif hasil_kelas=="Hawar":
                                                id_jenis=2
                                        elif hasil_kelas=="Karat":
                                                id_jenis=3
                                        
                                        sql_jenis="SELECT id_dataset,id_jenis from tb_dataset where nama_dataset=('"+imgTest+"')"
                                        cursor.execute(sql_jenis)
                                        hasilJenis = cursor.fetchall()
                                        for i in hasilJenis:
                                                nomor_dataset=i[0]
                                                noIdjenis=i[1]
                                                # print("id jenis = "+str(noIdjenis))
                                                if id_jenis==noIdjenis:
                                                        status_kelas="Benar"
                                                else:
                                                        status_kelas="Salah"

                                        print("hasil_klasifikasi = "+hasil_kelas+", status= "+status_kelas)

                                        query_jumlah="SELECT id_klasifikasi FROM tb_klasifikasi order by id_klasifikasi desc limit 1"
                                        cursor.execute(query_jumlah)
                                        q_jumlah = cursor.fetchall()
                                        jumlah_klasifikasi=0
                                        for b in q_jumlah:
                                                jumlah_klasifikasi=b[0]

                                        jumlah_klasifikasi+=1
                                        sql_fknn="INSERT INTO tb_klasifikasi VALUES ('"+str(jumlah_klasifikasi)+"','"+imgTest+"','"+str(k3)+"','"+str(nilaifknn)+"','"+hasil_kelas+"','"+status_kelas+"','"+str(nomor_dataset)+"','"+str(noIdjenis)+"')"
                                        cursor.execute(sql_fknn)
                                        db.commit()
                                        
                                        # # #  ----------------fknn start k=9-------------------------------
                                        k4=9
                                        sqlu  = "SELECT POW(euclidian,-2) AS pangkat, hasil_cm FROM tb_euclidian where data_testing=('"+imgTest+"') order by euclidian asc limit 9"
                                        cursor.execute(sqlu)
                                        row  = cursor.fetchall()

                                        df = pd.DataFrame(row, columns = ['Nilai', 'Kelas'])
                                        jumlah = df.Nilai.sum()
                                        group = df.groupby(['Kelas']).sum().reset_index()
                                        group.Nilai.mul(3, fill_value=0).reset_index()
                                        group["Bagi"] = group.Nilai.div(jumlah)

                                        arr= group.to_numpy()
                                        columnIndex = 2
                                        sortedArr = arr[arr[:,columnIndex].argsort()[::-1]]

                                        hasil_kelas=str(sortedArr[0][0])

                                        nilaifknn = sortedArr[0][2]

                                        if hasil_kelas=="Bercak":
                                                id_jenis=1
                                        elif hasil_kelas=="Hawar":
                                                id_jenis=2
                                        elif hasil_kelas=="Karat":
                                                id_jenis=3
                                        
                                        sql_jenis="SELECT id_dataset,id_jenis from tb_dataset where nama_dataset=('"+imgTest+"')"
                                        cursor.execute(sql_jenis)
                                        hasilJenis = cursor.fetchall()
                                        for i in hasilJenis:
                                                nomor_dataset=i[0]
                                                noIdjenis=i[1]
                                                # print("id jenis = "+str(noIdjenis))
                                                if id_jenis==noIdjenis:
                                                        status_kelas="Benar"
                                                else:
                                                        status_kelas="Salah"

                                        print("hasil_klasifikasi = "+hasil_kelas+", status= "+status_kelas)

                                        query_jumlah="SELECT id_klasifikasi FROM tb_klasifikasi order by id_klasifikasi desc limit 1"
                                        cursor.execute(query_jumlah)
                                        q_jumlah = cursor.fetchall()
                                        jumlah_klasifikasi=0
                                        for b in q_jumlah:
                                                jumlah_klasifikasi=b[0]

                                        jumlah_klasifikasi+=1
                                        sql_fknn="INSERT INTO tb_klasifikasi VALUES ('"+str(jumlah_klasifikasi)+"','"+imgTest+"','"+str(k4)+"','"+str(nilaifknn)+"','"+hasil_kelas+"','"+status_kelas+"','"+str(nomor_dataset)+"','"+str(noIdjenis)+"')"
                                        cursor.execute(sql_fknn)
                                        db.commit()

                                        # # #  ----------------fknn start k=11-------------------------------
                                        k5=11
                                        sqlu  = "SELECT POW(euclidian,-2) AS pangkat, hasil_cm FROM tb_euclidian where data_testing=('"+imgTest+"') order by euclidian asc limit 11"
                                        cursor.execute(sqlu)
                                        row  = cursor.fetchall()

                                        df = pd.DataFrame(row, columns = ['Nilai', 'Kelas'])
                                        jumlah = df.Nilai.sum()
                                        group = df.groupby(['Kelas']).sum().reset_index()
                                        group.Nilai.mul(3, fill_value=0).reset_index()
                                        group["Bagi"] = group.Nilai.div(jumlah)

                                        arr= group.to_numpy()
                                        columnIndex = 2
                                        sortedArr = arr[arr[:,columnIndex].argsort()[::-1]]

                                        hasil_kelas=str(sortedArr[0][0])

                                        nilaifknn = sortedArr[0][2]

                                        if hasil_kelas=="Bercak":
                                                id_jenis=1
                                        elif hasil_kelas=="Hawar":
                                                id_jenis=2
                                        elif hasil_kelas=="Karat":
                                                id_jenis=3
                                        
                                        sql_jenis="SELECT id_dataset,id_jenis from tb_dataset where nama_dataset=('"+imgTest+"')"
                                        cursor.execute(sql_jenis)
                                        hasilJenis = cursor.fetchall()
                                        for i in hasilJenis:
                                                nomor_dataset=i[0]
                                                noIdjenis=i[1]
                                                # print("id jenis = "+str(noIdjenis))
                                                if id_jenis==noIdjenis:
                                                        status_kelas="Benar"
                                                else:
                                                        status_kelas="Salah"

                                        print("hasil_klasifikasi = "+hasil_kelas+", status= "+status_kelas)

                                        query_jumlah="SELECT id_klasifikasi FROM tb_klasifikasi order by id_klasifikasi desc limit 1"
                                        cursor.execute(query_jumlah)
                                        q_jumlah = cursor.fetchall()
                                        jumlah_klasifikasi=0
                                        for b in q_jumlah:
                                                jumlah_klasifikasi=b[0]

                                        jumlah_klasifikasi+=1
                                        sql_fknn="INSERT INTO tb_klasifikasi VALUES ('"+str(jumlah_klasifikasi)+"','"+imgTest+"','"+str(k5)+"','"+str(nilaifknn)+"','"+hasil_kelas+"','"+status_kelas+"','"+str(nomor_dataset)+"','"+str(noIdjenis)+"')"
                                        cursor.execute(sql_fknn)
                                        db.commit()

                        # menampilkan data hasil euclidian dalam bentuk tabel
                        self.tabel_euclidian.setRowCount(0)
                        sql_tabel_euc="SELECT data_testing,data_training,euclidian from tb_euclidian where data_testing=('"+imgTest+"') ORDER BY euclidian ASC"
                        cursor.execute(sql_tabel_euc)
                        tabel_euc=cursor.fetchall()
                        for row_number, row_data in enumerate(tabel_euc):
                                self.tabel_euclidian.insertRow(row_number)
                                for column_number, data in enumerate(row_data):
                                        self.tabel_euclidian.setStyleSheet("background-color: rgb(255, 255, 255);")
                                        self.tabel_euclidian.setItem(row_number, column_number, QtWidgets.QTableWidgetItem(str(data)))
                        # =============================================================================================================

                        # menampilkan data klasifikasi berdasarkan citra yg dipilih ke dalam bentuk tabel
                        self.tabel_klasifikasi.setRowCount(0)
                        sql_tabel_klasifikasi="SELECT nama_dataset, nilai_k, nilai_fknn,hasil_klasifikasi,status_klasifikasi from tb_klasifikasi where nama_dataset=('"+imgTest+"')"
                        cursor.execute(sql_tabel_klasifikasi)
                        tabel_klass=cursor.fetchall()   
                        for row_number, row_data in enumerate(tabel_klass):
                                self.tabel_klasifikasi.insertRow(row_number)
                                for column_number, data in enumerate(row_data):
                                        self.tabel_klasifikasi.setStyleSheet("background-color: rgb(255, 255, 255);")
                                        self.tabel_klasifikasi.setItem(row_number, column_number, QtWidgets.QTableWidgetItem(str(data)))
                        ##==============================================================================================================
      
        def retranslateUi(self, MainWindow):
                _translate = QtCore.QCoreApplication.translate
                MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
                self.tombolInput.setText(_translate("MainWindow", "Input"))
                self.label_4.setText(_translate("MainWindow", "Penginputan Citra Penyakit Daun Jagung"))
                self.tampilgambar.setItemText(0, _translate("MainWindow", "Pilih Data Testing"))
                self.tampilnilaiK.setItemText(0, _translate("MainWindow", "Pilih Nilai K"))
                self.inputGambar.setText(_translate("MainWindow", "Input Gambar"))
                self.trainData.setText(_translate("MainWindow", "Training Data"))
                self.label_5.setText(_translate("MainWindow", "Hasil Fitur Data Training"))
                self.tombol_reset.setText(_translate("MainWindow", "Ulang Training Data"))
                self.tombol_inputK.setText(_translate("MainWindow", "Mulai"))
                self.tombol_reset1.setText(_translate("MainWindow", "Ulang Klasifikasi Data"))
                self.label_7.setText(_translate("MainWindow", "Tabel Euclidian Distance"))
                self.label_9.setText(_translate("MainWindow", "Tabel Hasil Klasifikasi"))
                
                item = self.tabel_fitur.horizontalHeaderItem(0)
                item.setText(_translate("MainWindow", "Nama Dataset"))
                item = self.tabel_fitur.horizontalHeaderItem(1)
                item.setText(_translate("MainWindow", "Mean H"))
                item = self.tabel_fitur.horizontalHeaderItem(2)
                item.setText(_translate("MainWindow", "Mean S"))
                item = self.tabel_fitur.horizontalHeaderItem(3)
                item.setText(_translate("MainWindow", "Mean V"))
                item = self.tabel_fitur.horizontalHeaderItem(4)
                item.setText(_translate("MainWindow", "Standev H"))
                item = self.tabel_fitur.horizontalHeaderItem(5)
                item.setText(_translate("MainWindow", "Standev S"))
                item = self.tabel_fitur.horizontalHeaderItem(6)
                item.setText(_translate("MainWindow", "Standev V"))
                item = self.tabel_fitur.horizontalHeaderItem(7)
                item.setText(_translate("MainWindow", "Skew H"))
                item = self.tabel_fitur.horizontalHeaderItem(8)
                item.setText(_translate("MainWindow", "Skew S"))
                item = self.tabel_fitur.horizontalHeaderItem(9)
                item.setText(_translate("MainWindow", "Skew V"))
                
                item = self.tabel_euclidian.horizontalHeaderItem(0)
                item.setText(_translate("MainWindow", "Citra Testing"))
                item = self.tabel_euclidian.horizontalHeaderItem(1)
                item.setText(_translate("MainWindow", "Citra Training"))
                item = self.tabel_euclidian.horizontalHeaderItem(2)
                item.setText(_translate("MainWindow", "Euclidean"))
                
                item = self.tabel_klasifikasi.horizontalHeaderItem(0)
                item.setText(_translate("MainWindow", "Nama Citra"))
                item = self.tabel_klasifikasi.horizontalHeaderItem(1)
                item.setText(_translate("MainWindow", "Nilai K"))
                item = self.tabel_klasifikasi.horizontalHeaderItem(2)
                item.setText(_translate("MainWindow", "Nilai FKNN"))
                item = self.tabel_klasifikasi.horizontalHeaderItem(3)
                item.setText(_translate("MainWindow", "Hasil Klasifikasi"))
                item = self.tabel_klasifikasi.horizontalHeaderItem(4)
                item.setText(_translate("MainWindow", "Status Klasifikasi"))
                
                item = self.tabel_akurasi.horizontalHeaderItem(0)
                item.setText(_translate("MainWindow", "Nama Citra"))
                item = self.tabel_akurasi.horizontalHeaderItem(1)
                item.setText(_translate("MainWindow", "Nilai K"))
                item = self.tabel_akurasi.horizontalHeaderItem(2)
                item.setText(_translate("MainWindow", "Hasil Klasifikasi"))
                item = self.tabel_akurasi.horizontalHeaderItem(3)
                item.setText(_translate("MainWindow", "Status Klasifikasi"))
                self.label_10.setText(_translate("MainWindow", "Tabel Klasifikasi Keseluruhan"))
                self.label_13.setText(_translate("MainWindow", "Tingkat Akurasi"))
                self.tingkat_akurasi.setText(_translate("MainWindow", "0.0%"))
                self.label_17.setText(_translate("MainWindow", "Jumlah Klasifikasi Benar"))
                self.jumlah_benar.setText(_translate("MainWindow", "0"))
                self.label_3.setText(_translate("MainWindow", "Color Moment dan Fuzzy K-Nearest Neighbour"))
                self.menuHasil.setText(_translate("MainWindow", "     Hasil   "))
                self.menuInput.setText(_translate("MainWindow", "     Input   "))
                self.menuAkurasi.setText(_translate("MainWindow", "   Akurasi "))
                
                # menampilkan nilai fitur data training
                self.tabel_fitur.setRowCount(0)
                sql_tabel_fitur="SELECT tb_dataset.nama_dataset, tb_cm.meanH, tb_cm.meanS, tb_cm.meanV, tb_cm.standevH, tb_cm.standevS, tb_cm.standevV, tb_cm.skewH, tb_cm.skewS, tb_cm.skewV FROM tb_dataset, tb_cm WHERE tb_dataset.id_dataset=tb_cm.id_dataset"
                cursor.execute(sql_tabel_fitur)
                tabel_ft=cursor.fetchall()
                for row_number, row_data in enumerate(tabel_ft):
                        self.tabel_fitur.insertRow(row_number)
                        for column_number, data in enumerate(row_data):
                                self.tabel_fitur.setStyleSheet("background-color: rgb(255, 255, 255);")
                                self.tabel_fitur.setItem(row_number, column_number, QtWidgets.QTableWidgetItem(str(data)))
                # ========================================================================================================
                
                self.frame_input.setVisible(True)
                self.frame_hasil.setVisible(False)
                self.frame_akurasi.setVisible(False)
                
                self.menuInput.clicked.connect(self.get_menu1)
                self.menuHasil.clicked.connect(self.get_menu2)
                self.menuAkurasi.clicked.connect(self.get_menu3)

        def get_menu1(self):
                self.frame_input.setVisible(True)
                self.frame_hasil.setVisible(False)
                self.frame_akurasi.setVisible(False)
        def get_menu2(self):
                self.frame_input.setVisible(False)
                self.frame_hasil.setVisible(True)
                self.frame_akurasi.setVisible(False)
        def get_menu3(self):
                self.frame_input.setVisible(False)
                self.frame_hasil.setVisible(False)
                self.frame_akurasi.setVisible(True)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())